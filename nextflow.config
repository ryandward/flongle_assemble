manifest {
    name = 'flongle_assemble'
    author = 'Ryan Ward'
    description = 'Flongle ONT assembly pipeline with conservative polishing to prevent systematic tctâ†’ttt errors'
    version = '1.0.0'
    nextflowVersion = '>=22.0.0'
    mainScript = 'main.nf'
}

params {
    // Input parameters
    ref_fasta = null
    reads = '*.fastq.gz'
    
    // Resource limits
    max_cpus = 16
    max_memory = '32.GB'
    
    // Output
    outdir = './results'
}

process {
    cpus = { check_max(4, 'cpus') }
    memory = { check_max(8.GB, 'memory') }
    
    withName: ALIGN_AND_EXTRACT {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
    }
    
    withName: ASSEMBLE {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(12.GB, 'memory') }
    }
    
    withName: 'POLISH.*' {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(8.GB, 'memory') }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR - Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "ERROR - Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
